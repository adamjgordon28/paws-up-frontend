{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/code/Mod-4/project/paws-up-frontend/paws-up-client/src/index.js\";\nimport React from 'react';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport adoptersReducer from './reducers/adoptersReducer'; //TODO: move\n\nimport petsReducer from './reducers/petsReducer';\nimport registerServiceWorker from './registerServiceWorker'; // combines your reducers =>\n\n/*\n{\n  key: value\n  whereToNestReducerState: reducer\n}\n*/\n\nconst rootReducer = combineReducers({\n  adoptersReducer: adoptersReducer,\n  petsReducer: petsReducer\n}); //TODO: move this too\n// dion't use thunk if you don't think you need to\n// is not the only lubrary to do that -=> redux-saga, redux-promise\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk))); //TODO: move this\n\nconsole.log(\"%c INITIAL REDUX STORE\", 'color: purple', store.getState());\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, React.createElement(Router, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}))), document.getElementById('root'));\nregisterServiceWorker();","map":{"version":3,"sources":["/Users/flatironschool/Development/code/Mod-4/project/paws-up-frontend/paws-up-client/src/index.js"],"names":["React","createStore","combineReducers","applyMiddleware","Provider","thunk","composeWithDevTools","ReactDOM","BrowserRouter","Router","App","adoptersReducer","petsReducer","registerServiceWorker","rootReducer","store","console","log","getState","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,OAAO,aAAP;AAEA,OAAO,kCAAP;AAEA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,4BAA5B,C,CAAyD;;AACzD,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,OAAOC,qBAAP,MAAkC,yBAAlC,C,CAEA;;AACA;;;;;;;AAMA,MAAMC,WAAW,GAAGZ,eAAe,CAAC;AAAES,EAAAA,eAAe,EAAEA,eAAnB;AAAoCC,EAAAA,WAAW,EAAEA;AAAjD,CAAD,CAAnC,C,CAAoG;AAEpG;AACA;;AACA,MAAMG,KAAK,GAAGd,WAAW,CAACa,WAAD,EAAcR,mBAAmB,CAACH,eAAe,CAACE,KAAD,CAAhB,CAAjC,CAAzB,C,CAAoF;;AAEpFW,OAAO,CAACC,GAAR,2BAAsC,eAAtC,EAAuDF,KAAK,CAACG,QAAN,EAAvD;AAEAX,QAAQ,CAACY,MAAT,CACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEJ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADF,EAMEK,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF;AAQAR,qBAAqB","sourcesContent":["import React from 'react'\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nimport App from './App'\nimport adoptersReducer from './reducers/adoptersReducer' //TODO: move\nimport petsReducer from './reducers/petsReducer'\n\nimport registerServiceWorker from './registerServiceWorker'\n\n// combines your reducers =>\n/*\n{\n  key: value\n  whereToNestReducerState: reducer\n}\n*/\nconst rootReducer = combineReducers({ adoptersReducer: adoptersReducer, petsReducer: petsReducer }) //TODO: move this too\n\n// dion't use thunk if you don't think you need to\n// is not the only lubrary to do that -=> redux-saga, redux-promise\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk))) //TODO: move this\n\nconsole.log(`%c INITIAL REDUX STORE`, 'color: purple', store.getState())\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n)\nregisterServiceWorker()\n"]},"metadata":{},"sourceType":"module"}