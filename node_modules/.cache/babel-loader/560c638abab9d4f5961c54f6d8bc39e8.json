{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _invoke from 'lodash/invoke';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Portal from '../Portal';\nimport Transition from '../../modules/Transition';\nimport { getUnhandledProps, META } from '../../lib';\n/**\n * A sugar for `Portal` and `Transition`.\n * @see Portal\n * @see Transition\n */\n\nvar TransitionablePortal = function (_Component) {\n  _inherits(TransitionablePortal, _Component);\n\n  function TransitionablePortal(props) {\n    _classCallCheck(this, TransitionablePortal);\n\n    var _this = _possibleConstructorReturn(this, (TransitionablePortal.__proto__ || Object.getPrototypeOf(TransitionablePortal)).call(this, props));\n\n    _this.handlePortalClose = function () {\n      _this.setState({\n        portalOpen: false\n      });\n    };\n\n    _this.handlePortalOpen = function () {\n      _this.setState({\n        portalOpen: true\n      });\n    };\n\n    _this.handleTransitionHide = function (nothing, data) {\n      var portalOpen = _this.state.portalOpen;\n\n      _this.setState({\n        transitionVisible: false\n      });\n\n      _invoke(_this.props, 'onClose', null, _extends({}, data, {\n        portalOpen: false,\n        transitionVisible: false\n      }));\n\n      _invoke(_this.props, 'onHide', null, _extends({}, data, {\n        portalOpen: portalOpen,\n        transitionVisible: false\n      }));\n    };\n\n    _this.handleTransitionStart = function (nothing, data) {\n      var portalOpen = _this.state.portalOpen;\n      var status = data.status;\n      var transitionVisible = status === Transition.ENTERING;\n\n      _invoke(_this.props, 'onStart', null, _extends({}, data, {\n        portalOpen: portalOpen,\n        transitionVisible: transitionVisible\n      })); // Heads up! TransitionablePortal fires onOpen callback on the start of transition animation\n\n\n      if (!transitionVisible) return;\n\n      _this.setState({\n        transitionVisible: transitionVisible\n      });\n\n      _invoke(_this.props, 'onOpen', null, _extends({}, data, {\n        transitionVisible: transitionVisible,\n        portalOpen: true\n      }));\n    };\n\n    _this.state = {\n      portalOpen: props.open\n    };\n    return _this;\n  } // ----------------------------------------\n  // Lifecycle\n  // ----------------------------------------\n\n\n  _createClass(TransitionablePortal, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(_ref) {\n      var open = _ref.open;\n      this.setState({\n        portalOpen: open\n      });\n    } // ----------------------------------------\n    // Callback handling\n    // ----------------------------------------\n\n  }, {\n    key: 'render',\n    // ----------------------------------------\n    // Render\n    // ----------------------------------------\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          transition = _props.transition;\n      var _state = this.state,\n          portalOpen = _state.portalOpen,\n          transitionVisible = _state.transitionVisible;\n      var open = portalOpen || transitionVisible;\n      var rest = getUnhandledProps(TransitionablePortal, this.props);\n      return React.createElement(Portal, _extends({}, rest, {\n        open: open,\n        onOpen: this.handlePortalOpen,\n        onClose: this.handlePortalClose\n      }), React.createElement(Transition, _extends({}, transition, {\n        transitionOnMount: true,\n        onStart: this.handleTransitionStart,\n        onHide: this.handleTransitionHide,\n        visible: portalOpen\n      }), children));\n    }\n  }]);\n\n  return TransitionablePortal;\n}(Component);\n\nTransitionablePortal._meta = {\n  name: 'TransitionablePortal',\n  type: META.TYPES.ADDON\n};\nTransitionablePortal.defaultProps = {\n  transition: {\n    animation: 'scale',\n    duration: 400\n  }\n};\nTransitionablePortal.handledProps = ['children', 'onClose', 'onHide', 'onOpen', 'onStart', 'open', 'transition'];\nexport default TransitionablePortal;\nTransitionablePortal.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Primary content. */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Called when a close event happens.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and internal state.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback on each transition that changes visibility to hidden.\n   *\n   * @param {null}\n   * @param {object} data - All props with transition status and internal state.\n   */\n  onHide: PropTypes.func,\n\n  /**\n   * Called when an open event happens.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and internal state.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback on animation start.\n   *\n   * @param {null}\n   * @param {object} data - All props with transition status and internal state.\n   */\n  onStart: PropTypes.func,\n\n  /** Controls whether or not the portal is displayed. */\n  open: PropTypes.bool,\n\n  /** Transition props. */\n  transition: PropTypes.object\n} : {};","map":null,"metadata":{},"sourceType":"module"}