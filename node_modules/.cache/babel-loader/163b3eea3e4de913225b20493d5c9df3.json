{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _map from 'lodash/map';\nimport _invoke from 'lodash/invoke';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { AutoControlledComponent as Component, createPaginationItems, customPropTypes, getUnhandledProps, META } from '../../lib';\nimport Menu from '../../collections/Menu';\nimport PaginationItem from './PaginationItem';\n/**\n * A component to render a pagination.\n */\n\nvar Pagination = function (_Component) {\n  _inherits(Pagination, _Component);\n\n  function Pagination() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Pagination);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call.apply(_ref, [this].concat(args))), _this), _this.handleItemClick = function (e, _ref2) {\n      var value = _ref2.value;\n\n      _this.trySetState({\n        activePage: value\n      });\n\n      _invoke(_this.props, 'onPageChange', e, _extends({}, _this.props, {\n        activePage: value\n      }));\n    }, _this.handleItemOverrides = function (active, type, value) {\n      return function (predefinedProps) {\n        return {\n          active: active,\n          type: type,\n          key: type + '-' + value,\n          onClick: function onClick(e, itemProps) {\n            _invoke(predefinedProps, 'onClick', e, itemProps);\n\n            _this.handleItemClick(e, itemProps);\n          }\n        };\n      };\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Pagination, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          ariaLabel = _props.ariaLabel,\n          boundaryRange = _props.boundaryRange,\n          siblingRange = _props.siblingRange,\n          totalPages = _props.totalPages;\n      var activePage = this.state.activePage;\n      var items = createPaginationItems({\n        activePage: activePage,\n        boundaryRange: boundaryRange,\n        siblingRange: siblingRange,\n        totalPages: totalPages\n      });\n      var rest = getUnhandledProps(Pagination, this.props);\n      return React.createElement(Menu, _extends({}, rest, {\n        'aria-label': ariaLabel,\n        pagination: true,\n        role: 'navigation'\n      }), _map(items, function (_ref3) {\n        var active = _ref3.active,\n            type = _ref3.type,\n            value = _ref3.value;\n        return PaginationItem.create(_this2.props[type], {\n          defaultProps: {\n            content: value,\n            value: value\n          },\n          overrideProps: _this2.handleItemOverrides(active, type, value)\n        });\n      }));\n    }\n  }]);\n\n  return Pagination;\n}(Component);\n\nPagination.autoControlledProps = ['activePage'];\nPagination.defaultProps = {\n  ariaLabel: 'Pagination Navigation',\n  boundaryRange: 1,\n  ellipsisItem: '...',\n  firstItem: {\n    ariaLabel: 'First item',\n    content: '«'\n  },\n  lastItem: {\n    ariaLabel: 'Last item',\n    content: '»'\n  },\n  nextItem: {\n    ariaLabel: 'Next item',\n    content: '⟩'\n  },\n  pageItem: {},\n  prevItem: {\n    ariaLabel: 'Previous item',\n    content: '⟨'\n  },\n  siblingRange: 1\n};\nPagination._meta = {\n  name: 'Pagination',\n  type: META.TYPES.ADDON\n};\nPagination.Item = PaginationItem;\nPagination.handledProps = ['activePage', 'ariaLabel', 'boundaryRange', 'defaultActivePage', 'ellipsisItem', 'firstItem', 'lastItem', 'nextItem', 'onPageChange', 'pageItem', 'prevItem', 'siblingRange', 'totalPages'];\nexport default Pagination;\nPagination.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** A pagination item can have an aria label. */\n  ariaLabel: PropTypes.string,\n\n  /** Initial activePage value. */\n  defaultActivePage: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** Index of the currently active page. */\n  activePage: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** Number of always visible pages at the beginning and end. */\n  boundaryRange: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** A shorthand for PaginationItem. */\n  ellipsisItem: customPropTypes.itemShorthand,\n\n  /** A shorthand for PaginationItem. */\n  firstItem: customPropTypes.itemShorthand,\n\n  /** A shorthand for PaginationItem. */\n  lastItem: customPropTypes.itemShorthand,\n\n  /** A shorthand for PaginationItem. */\n  nextItem: customPropTypes.itemShorthand,\n\n  /** A shorthand for PaginationItem. */\n  pageItem: customPropTypes.itemShorthand,\n\n  /** A shorthand for PaginationItem. */\n  prevItem: customPropTypes.itemShorthand,\n\n  /**\n   * Called on change of an active page.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onPageChange: PropTypes.func,\n\n  /** Number of always visible pages before and after the current one. */\n  siblingRange: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** Total number of pages. */\n  totalPages: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n} : {};","map":null,"metadata":{},"sourceType":"module"}