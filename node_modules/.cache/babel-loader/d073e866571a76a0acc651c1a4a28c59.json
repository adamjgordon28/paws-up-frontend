{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _sum from 'lodash/sum';\nimport _invoke from 'lodash/invoke';\nimport _get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n/**\n * A TextArea can be used to allow for extended user input.\n * @see Form\n */\n\nvar TextArea = function (_Component) {\n  _inherits(TextArea, _Component);\n\n  function TextArea() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TextArea);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call.apply(_ref, [this].concat(args))), _this), _this.focus = function () {\n      return _this.ref.focus();\n    }, _this.handleChange = function (e) {\n      var value = _get(e, 'target.value');\n\n      _invoke(_this.props, 'onChange', e, _extends({}, _this.props, {\n        value: value\n      }));\n    }, _this.handleInput = function (e) {\n      var value = _get(e, 'target.value');\n\n      _invoke(_this.props, 'onInput', e, _extends({}, _this.props, {\n        value: value\n      }));\n\n      _this.updateHeight();\n    }, _this.handleRef = function (c) {\n      return _this.ref = c;\n    }, _this.removeAutoHeightStyles = function () {\n      _this.ref.style.height = null;\n      _this.ref.style.resize = null;\n    }, _this.updateHeight = function () {\n      var autoHeight = _this.props.autoHeight;\n      if (!_this.ref || !autoHeight) return;\n\n      var _window$getComputedSt = window.getComputedStyle(_this.ref),\n          minHeight = _window$getComputedSt.minHeight,\n          borderBottomWidth = _window$getComputedSt.borderBottomWidth,\n          borderTopWidth = _window$getComputedSt.borderTopWidth;\n\n      var borderHeight = _sum([borderBottomWidth, borderTopWidth].map(function (x) {\n        return parseFloat(x);\n      })); // Measure the scrollHeight and update the height to match.\n\n\n      _this.ref.style.height = 'auto';\n      _this.ref.style.overflowY = 'hidden';\n      _this.ref.style.height = Math.max(parseFloat(minHeight), Math.ceil(_this.ref.scrollHeight + borderHeight)) + 'px';\n      _this.ref.style.overflowY = '';\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TextArea, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.updateHeight();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      // removed autoHeight\n      if (!this.props.autoHeight && prevProps.autoHeight) {\n        this.removeAutoHeightStyles();\n      } // added autoHeight or value changed\n\n\n      if (this.props.autoHeight && !prevProps.autoHeight || prevProps.value !== this.props.value) {\n        this.updateHeight();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          autoHeight = _props.autoHeight,\n          rows = _props.rows,\n          style = _props.style,\n          value = _props.value;\n      var rest = getUnhandledProps(TextArea, this.props);\n      var ElementType = getElementType(TextArea, this.props);\n      var resize = autoHeight ? 'none' : '';\n      return React.createElement(ElementType, _extends({}, rest, {\n        onChange: this.handleChange,\n        onInput: this.handleInput,\n        ref: this.handleRef,\n        rows: rows,\n        style: _extends({\n          resize: resize\n        }, style),\n        value: value\n      }));\n    }\n  }]);\n\n  return TextArea;\n}(Component);\n\nTextArea._meta = {\n  name: 'TextArea',\n  type: META.TYPES.ADDON\n};\nTextArea.defaultProps = {\n  as: 'textarea',\n  rows: 3\n};\nTextArea.handledProps = ['as', 'autoHeight', 'onChange', 'onInput', 'rows', 'style', 'value'];\nTextArea.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Indicates whether height of the textarea fits the content or not. */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * Called on change.\n   * @param {SyntheticEvent} event - The React SyntheticEvent object\n   * @param {object} data - All props and the event value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Called on input.\n   * @param {SyntheticEvent} event - The React SyntheticEvent object\n   * @param {object} data - All props and the event value.\n   */\n  onInput: PropTypes.func,\n\n  /** Indicates row count for a TextArea. */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** Custom TextArea style. */\n  style: PropTypes.object,\n\n  /** The value of the textarea. */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\nexport default TextArea;","map":null,"metadata":{},"sourceType":"module"}