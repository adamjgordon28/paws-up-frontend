{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/code/Mod-4/project/paws-up-frontend/paws-up-client/src/containers/PetContainer.js\";\nimport React, { Fragment } from 'react';\nimport PetCard from '../components/PetCard';\nimport { connect } from 'react-redux';\nimport { fetchCurrentAdopter } from '../actions/adopter';\nimport './PetPage.css';\n\nclass PetContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderPets = () => {\n      if (this.props.pets) {\n        let petNameArray = this.props.pets.map(pet => {\n          return React.createElement(PetCard, {\n            key: pet.id,\n            pet: pet,\n            setSelectedPet: this.props.setSelectedPet,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 17\n            },\n            __self: this\n          });\n        });\n        return petNameArray;\n      } else {\n        return React.createElement(\"h1\", {\n          style: {\n            marginTop: \"5em\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, \"There are no pets that meet these specs!\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('jwt') && !this.props.loggedIn) this.props.fetchCurrentAdopter();\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, this.renderPets()));\n  }\n\n}\n\nconst mapStateToProps = reduxStoreState => {\n  return {\n    loggedIn: reduxStoreState.adoptersReducer.loggedIn,\n    authenticatingAdopter: reduxStoreState.adoptersReducer.authenticatingAdopter\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchCurrentAdopter\n})(PetContainer);","map":{"version":3,"sources":["/Users/flatironschool/Development/code/Mod-4/project/paws-up-frontend/paws-up-client/src/containers/PetContainer.js"],"names":["React","Fragment","PetCard","connect","fetchCurrentAdopter","PetContainer","Component","renderPets","props","pets","petNameArray","map","pet","id","setSelectedPet","marginTop","componentDidMount","localStorage","getItem","loggedIn","render","mapStateToProps","reduxStoreState","adoptersReducer","authenticatingAdopter"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,OAAO,eAAP;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAO3CC,UAP2C,GAO9B,MAAM;AACjB,UAAI,KAAKC,KAAL,CAAWC,IAAf,EAAoB;AACpB,YAAIC,YAAY,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgBE,GAAhB,CAAqBC,GAAD,IAAS;AAC9C,iBAAO,oBAAC,OAAD;AAAS,YAAA,GAAG,EAAEA,GAAG,CAACC,EAAlB;AAAsB,YAAA,GAAG,EAAED,GAA3B;AAAgC,YAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWM,cAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SAFkB,CAAnB;AAGA,eAAOJ,YAAP;AACC,OALD,MAMI;AACF,eAAO;AAAI,UAAA,KAAK,EAAI;AAACK,YAAAA,SAAS,EAAE;AAAZ,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAAP;AACD;AACF,KAjB0C;AAAA;;AAEzCC,EAAAA,iBAAiB,GAAE;AACjB,QAAIC,YAAY,CAACC,OAAb,CAAqB,KAArB,KAA+B,CAAC,KAAKV,KAAL,CAAWW,QAA/C,EAAyD,KAAKX,KAAL,CAAWJ,mBAAX;AAC1D;;AAeDgB,EAAAA,MAAM,GAAE;AACN,WACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKb,UAAL,EADD,CAFA,CADF;AAUD;;AA9BwC;;AAkC3C,MAAMc,eAAe,GAAIC,eAAD,IAAqB;AAC3C,SAAO;AACLH,IAAAA,QAAQ,EAAEG,eAAe,CAACC,eAAhB,CAAgCJ,QADrC;AAELK,IAAAA,qBAAqB,EAAEF,eAAe,CAACC,eAAhB,CAAgCC;AAFlD,GAAP;AAID,CALD;;AAOA,eAAerB,OAAO,CAACkB,eAAD,EAAkB;AAACjB,EAAAA;AAAD,CAAlB,CAAP,CAAgDC,YAAhD,CAAf","sourcesContent":["import React, {Fragment} from 'react';\nimport PetCard from '../components/PetCard'\nimport { connect } from 'react-redux'\nimport { fetchCurrentAdopter } from '../actions/adopter'\nimport './PetPage.css'\n\nclass PetContainer extends React.Component {\n\n  componentDidMount(){\n    if (localStorage.getItem('jwt') && !this.props.loggedIn) this.props.fetchCurrentAdopter()\n  }\n\n\nrenderPets = () => {\n  if (this.props.pets){\n  let petNameArray = this.props.pets.map((pet) => {\n    return <PetCard key={pet.id} pet={pet} setSelectedPet={this.props.setSelectedPet} />\n  })\n  return petNameArray\n  }\n  else{\n    return <h1 style = {{marginTop: \"5em\"}}>There are no pets that meet these specs!</h1>\n  }\n}\n\n  render(){\n    return (\n      <Fragment>\n\n      <div className=\"container\" >\n      {this.renderPets()}\n      </div>\n\n      </Fragment>\n    )\n\n  }\n\n}\n\nconst mapStateToProps = (reduxStoreState) => {\n  return {\n    loggedIn: reduxStoreState.adoptersReducer.loggedIn,\n    authenticatingAdopter: reduxStoreState.adoptersReducer.authenticatingAdopter\n  }\n}\n\nexport default connect(mapStateToProps, {fetchCurrentAdopter})(PetContainer)\n"]},"metadata":{},"sourceType":"module"}