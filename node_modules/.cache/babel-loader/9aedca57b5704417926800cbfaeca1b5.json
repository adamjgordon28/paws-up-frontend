{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _times from 'lodash/times';\nimport _invoke from 'lodash/invoke';\nimport _without from 'lodash/without';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { AutoControlledComponent as Component, customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly } from '../../lib';\nimport RatingIcon from './RatingIcon';\n/**\n * A rating indicates user interest in content.\n */\n\nvar Rating = function (_Component) {\n  _inherits(Rating, _Component);\n\n  function Rating() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Rating);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Rating.__proto__ || Object.getPrototypeOf(Rating)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Rating, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          className = _props.className,\n          disabled = _props.disabled,\n          icon = _props.icon,\n          maxRating = _props.maxRating,\n          size = _props.size;\n      var _state = this.state,\n          rating = _state.rating,\n          selectedIndex = _state.selectedIndex,\n          isSelecting = _state.isSelecting;\n      var classes = cx('ui', icon, size, useKeyOnly(disabled, 'disabled'), useKeyOnly(isSelecting && !disabled && selectedIndex >= 0, 'selected'), 'rating', className);\n      var rest = getUnhandledProps(Rating, this.props);\n      var ElementType = getElementType(Rating, this.props);\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        role: 'radiogroup',\n        onMouseLeave: this.handleMouseLeave\n      }), _times(maxRating, function (i) {\n        return React.createElement(RatingIcon, {\n          active: rating >= i + 1,\n          'aria-checked': rating === i + 1,\n          'aria-posinset': i + 1,\n          'aria-setsize': maxRating,\n          index: i,\n          key: i,\n          onClick: _this2.handleIconClick,\n          onMouseEnter: _this2.handleIconMouseEnter,\n          selected: selectedIndex >= i && isSelecting\n        });\n      }));\n    }\n  }]);\n\n  return Rating;\n}(Component);\n\nRating.autoControlledProps = ['rating'];\nRating.defaultProps = {\n  clearable: 'auto',\n  maxRating: 1\n};\nRating._meta = {\n  name: 'Rating',\n  type: META.TYPES.MODULE\n};\nRating.Icon = RatingIcon;\nRating.handledProps = ['as', 'className', 'clearable', 'defaultRating', 'disabled', 'icon', 'maxRating', 'onRate', 'rating', 'size'];\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.handleIconClick = function (e, _ref2) {\n    var index = _ref2.index;\n    var _props2 = _this3.props,\n        clearable = _props2.clearable,\n        disabled = _props2.disabled,\n        maxRating = _props2.maxRating,\n        onRate = _props2.onRate;\n    var rating = _this3.state.rating;\n    if (disabled) return; // default newRating is the clicked icon\n    // allow toggling a binary rating\n    // allow clearing ratings\n\n    var newRating = index + 1;\n\n    if (clearable === 'auto' && maxRating === 1) {\n      newRating = +!rating;\n    } else if (clearable === true && newRating === rating) {\n      newRating = 0;\n    } // set rating\n\n\n    _this3.trySetState({\n      rating: newRating\n    }, {\n      isSelecting: false\n    });\n\n    if (onRate) onRate(e, _extends({}, _this3.props, {\n      rating: newRating\n    }));\n  };\n\n  this.handleIconMouseEnter = function (e, _ref3) {\n    var index = _ref3.index;\n    if (_this3.props.disabled) return;\n\n    _this3.setState({\n      selectedIndex: index,\n      isSelecting: true\n    });\n  };\n\n  this.handleMouseLeave = function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _invoke.apply(undefined, [_this3.props, 'onMouseLeave'].concat(args));\n\n    if (_this3.props.disabled) return;\n\n    _this3.setState({\n      selectedIndex: -1,\n      isSelecting: false\n    });\n  };\n};\n\nexport default Rating;\nRating.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /**\n   * You can clear the rating by clicking on the current start rating.\n   * By default a rating will be only clearable if there is 1 icon.\n   * Setting to `true`/`false` will allow or disallow a user to clear their rating.\n   */\n  clearable: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['auto'])]),\n\n  /** The initial rating value. */\n  defaultRating: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** You can disable or enable interactive rating.  Makes a read-only rating. */\n  disabled: PropTypes.bool,\n\n  /** A rating can use a set of star or heart icons. */\n  icon: PropTypes.oneOf(['star', 'heart']),\n\n  /** The total number of icons. */\n  maxRating: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Called after user selects a new rating.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and proposed rating.\n   */\n  onRate: PropTypes.func,\n\n  /** The current number of active icons. */\n  rating: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** A progress bar can vary in size. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium', 'big'))\n} : {};","map":null,"metadata":{},"sourceType":"module"}