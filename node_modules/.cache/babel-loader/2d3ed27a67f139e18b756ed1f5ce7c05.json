{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _invoke from 'lodash/invoke';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { eventStack, customPropTypes, getElementType, getUnhandledProps, isBrowser, META } from '../../lib';\n/**\n * Sticky content stays fixed to the browser viewport while another column of content is visible on the page.\n */\n\nvar Sticky = function (_Component) {\n  _inherits(Sticky, _Component);\n\n  function Sticky() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Sticky);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Sticky.__proto__ || Object.getPrototypeOf(Sticky)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      sticky: false\n    }, _this.addListeners = function (props) {\n      var scrollContext = props.scrollContext;\n      eventStack.sub('resize', _this.handleUpdate, {\n        target: scrollContext\n      });\n      eventStack.sub('scroll', _this.handleUpdate, {\n        target: scrollContext\n      });\n    }, _this.removeListeners = function () {\n      var scrollContext = _this.props.scrollContext;\n      eventStack.unsub('resize', _this.handleUpdate, {\n        target: scrollContext\n      });\n      eventStack.unsub('scroll', _this.handleUpdate, {\n        target: scrollContext\n      });\n    }, _this.update = function (e) {\n      var pushing = _this.state.pushing;\n      _this.ticking = false;\n\n      _this.assignRects();\n\n      if (pushing) {\n        if (_this.didReachStartingPoint()) return _this.stickToContextTop(e);\n        if (_this.didTouchScreenBottom()) return _this.stickToScreenBottom(e);\n        return _this.stickToContextBottom(e);\n      }\n\n      if (_this.isOversized()) {\n        if (_this.contextRect.top > 0) return _this.stickToContextTop(e);\n        if (_this.contextRect.bottom < window.innerHeight) return _this.stickToContextBottom(e);\n      }\n\n      if (_this.didTouchScreenTop()) {\n        if (_this.didReachContextBottom()) return _this.stickToContextBottom(e);\n        return _this.stickToScreenTop(e);\n      }\n\n      return _this.stickToContextTop(e);\n    }, _this.handleUpdate = function (e) {\n      if (!_this.ticking) {\n        _this.ticking = true;\n        requestAnimationFrame(function () {\n          return _this.update(e);\n        });\n      }\n    }, _this.assignRects = function () {\n      var context = _this.props.context;\n      _this.triggerRect = _this.triggerRef.getBoundingClientRect();\n      _this.contextRect = (context || document.body).getBoundingClientRect();\n      _this.stickyRect = _this.stickyRef.getBoundingClientRect();\n    }, _this.didReachContextBottom = function () {\n      var offset = _this.props.offset;\n      return _this.stickyRect.height + offset >= _this.contextRect.bottom;\n    }, _this.didReachStartingPoint = function () {\n      return _this.stickyRect.top <= _this.triggerRect.top;\n    }, _this.didTouchScreenTop = function () {\n      return _this.triggerRect.top < _this.props.offset;\n    }, _this.didTouchScreenBottom = function () {\n      var bottomOffset = _this.props.bottomOffset;\n      return _this.contextRect.bottom + bottomOffset > window.innerHeight;\n    }, _this.isOversized = function () {\n      return _this.stickyRect.height > window.innerHeight;\n    }, _this.pushing = function (pushing) {\n      var possible = _this.props.pushing;\n      if (possible) _this.setState({\n        pushing: pushing\n      });\n    }, _this.stick = function (e) {\n      _this.setState({\n        sticky: true\n      });\n\n      _invoke(_this.props, 'onStick', e, _this.props);\n    }, _this.unstick = function (e) {\n      _this.setState({\n        sticky: false\n      });\n\n      _invoke(_this.props, 'onUnstick', e, _this.props);\n    }, _this.stickToContextBottom = function (e) {\n      var top = _this.contextRect.bottom - _this.stickyRect.height;\n\n      _invoke(_this.props, 'onBottom', e, _this.props);\n\n      _this.stick(e);\n\n      _this.setState({\n        top: top,\n        bottom: null\n      });\n\n      _this.pushing(true);\n    }, _this.stickToContextTop = function (e) {\n      _invoke(_this.props, 'onTop', e, _this.props);\n\n      _this.unstick(e);\n\n      _this.pushing(false);\n    }, _this.stickToScreenBottom = function (e) {\n      var bottom = _this.props.bottomOffset;\n\n      _this.stick(e);\n\n      _this.setState({\n        bottom: bottom,\n        top: null\n      });\n    }, _this.stickToScreenTop = function (e) {\n      var top = _this.props.offset;\n\n      _this.stick(e);\n\n      _this.setState({\n        top: top,\n        bottom: null\n      });\n    }, _this.handleStickyRef = function (c) {\n      return _this.stickyRef = c;\n    }, _this.handleTriggerRef = function (c) {\n      return _this.triggerRef = c;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Sticky, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (!isBrowser()) return;\n      var active = this.props.active;\n\n      if (active) {\n        this.handleUpdate();\n        this.addListeners(this.props);\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var current = this.props.active;\n      var next = nextProps.active;\n      if (current === next) return;\n\n      if (next) {\n        this.handleUpdate();\n        this.addListeners(nextProps);\n        return;\n      }\n\n      this.removeListeners();\n      this.setState({\n        sticky: false\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (!isBrowser()) return;\n      var active = this.props.active;\n      if (active) this.removeListeners();\n    } // ----------------------------------------\n    // Events\n    // ----------------------------------------\n    // ----------------------------------------\n    // Handlers\n    // ----------------------------------------\n    // ----------------------------------------\n    // Helpers\n    // ----------------------------------------\n\n  }, {\n    key: 'computeStyle',\n    value: function computeStyle() {\n      var _state = this.state,\n          bottom = _state.bottom,\n          sticky = _state.sticky,\n          top = _state.top;\n      if (!sticky) return {};\n      return {\n        bottom: bottom,\n        top: top,\n        position: 'fixed',\n        width: this.triggerRect.width\n      };\n    } // Return true when the component reached the bottom of the context\n    // Return true when the component reached the starting point\n    // Return true when the top of the screen overpasses the Sticky component\n    // Return true when the bottom of the screen overpasses the Sticky component\n    // Return true if the height of the component is higher than the window\n    // ----------------------------------------\n    // Stick helpers\n    // ----------------------------------------\n    // If true, the component will stick to the bottom of the screen instead of the top\n    // ----------------------------------------\n    // Refs\n    // ----------------------------------------\n\n  }, {\n    key: 'render',\n    // ----------------------------------------\n    // Render\n    // ----------------------------------------\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className;\n      var rest = getUnhandledProps(Sticky, this.props);\n      var ElementType = getElementType(Sticky, this.props);\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: className\n      }), React.createElement('div', {\n        ref: this.handleTriggerRef\n      }), React.createElement('div', {\n        ref: this.handleStickyRef,\n        style: this.computeStyle()\n      }, children));\n    }\n  }]);\n\n  return Sticky;\n}(Component);\n\nSticky.defaultProps = {\n  active: true,\n  bottomOffset: 0,\n  offset: 0,\n  scrollContext: isBrowser() ? window : null\n};\nSticky._meta = {\n  name: 'Sticky',\n  type: META.TYPES.MODULE\n};\nSticky.handledProps = ['active', 'as', 'bottomOffset', 'children', 'className', 'context', 'offset', 'onBottom', 'onStick', 'onTop', 'onUnstick', 'pushing', 'scrollContext'];\nexport default Sticky;\nSticky.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A Sticky can be active. */\n  active: PropTypes.bool,\n\n  /** Offset in pixels from the bottom of the screen when fixing element to viewport. */\n  bottomOffset: PropTypes.number,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Context which sticky element should stick to. */\n  context: PropTypes.object,\n\n  /** Offset in pixels from the top of the screen when fixing element to viewport. */\n  offset: PropTypes.number,\n\n  /**\n   * Callback when element is bound to bottom of parent container.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onBottom: PropTypes.func,\n\n  /**\n   * Callback when element is fixed to page.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onStick: PropTypes.func,\n\n  /**\n   * Callback when element is bound to top of parent container.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onTop: PropTypes.func,\n\n  /**\n   * Callback when element is unfixed from page.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onUnstick: PropTypes.func,\n\n  /** Whether element should be \"pushed\" by the viewport, attaching to the bottom of the screen when scrolling up. */\n  pushing: PropTypes.bool,\n\n  /** Context which sticky should attach onscroll events. */\n  scrollContext: PropTypes.object\n} : {};","map":null,"metadata":{},"sourceType":"module"}